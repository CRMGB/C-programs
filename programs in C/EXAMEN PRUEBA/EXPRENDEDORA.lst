CCS PCM C Compiler, Version 4.023, 25097               13-dic-11 21:18

               Filename: C:\Documents and Settings\2CFGSL\Escritorio\examen\EXAMEN PRUEBA\EXPRENDEDORA.lst

               ROM used: 1268 words (15%)
                         Largest free fragment is 2048
               RAM used: 30 (8%) at main() level
                         44 (12%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   38E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.4
001A:  GOTO   01D
001B:  BTFSC  0B.1
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   0DC
.................... #include "EXPRENDEDORA.h" 
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES XT                    	//Crystal osc <= 4mhz 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=4000000) 
*
00E0:  MOVLW  36
00E1:  MOVWF  04
00E2:  BCF    03.7
00E3:  MOVF   00,W
00E4:  BTFSC  03.2
00E5:  GOTO   0F4
00E6:  MOVLW  01
00E7:  MOVWF  78
00E8:  CLRF   77
00E9:  DECFSZ 77,F
00EA:  GOTO   0E9
00EB:  DECFSZ 78,F
00EC:  GOTO   0E8
00ED:  MOVLW  4A
00EE:  MOVWF  77
00EF:  DECFSZ 77,F
00F0:  GOTO   0EF
00F1:  GOTO   0F2
00F2:  DECFSZ 00,F
00F3:  GOTO   0E6
00F4:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
....................  
....................  
.................... #include "LCD.C" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    #locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    #locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0102:  MOVLW  F0
0103:  BSF    03.5
0104:  MOVWF  06
....................       lcd.rw = 1; 
0105:  BCF    03.5
0106:  BSF    06.2
....................       delay_cycles(1); 
0107:  NOP
....................       lcd.enable = 1; 
0108:  BSF    06.0
....................       delay_cycles(1); 
0109:  NOP
....................       high = lcd.data; 
010A:  MOVF   06,W
010B:  SWAPF  06,W
010C:  ANDLW  0F
010D:  MOVWF  3D
....................       lcd.enable = 0; 
010E:  BCF    06.0
....................       delay_cycles(1); 
010F:  NOP
....................       lcd.enable = 1; 
0110:  BSF    06.0
....................       delay_us(1); 
0111:  NOP
....................       low = lcd.data; 
0112:  MOVF   06,W
0113:  SWAPF  06,W
0114:  ANDLW  0F
0115:  MOVWF  3C
....................       lcd.enable = 0; 
0116:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
0117:  MOVLW  00
0118:  BSF    03.5
0119:  MOVWF  06
....................       return( (high<<4) | low); 
011A:  BCF    03.5
011B:  SWAPF  3D,W
011C:  MOVWF  77
011D:  MOVLW  F0
011E:  ANDWF  77,F
011F:  MOVF   77,W
0120:  IORWF  3C,W
0121:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00F5:  SWAPF  3D,W
00F6:  ANDLW  F0
00F7:  MOVWF  77
00F8:  MOVLW  0F
00F9:  ANDWF  06,W
00FA:  IORWF  77,W
00FB:  MOVWF  06
....................       delay_cycles(1); 
00FC:  NOP
....................       lcd.enable = 1; 
00FD:  BSF    06.0
....................       delay_us(2); 
00FE:  GOTO   0FF
....................       lcd.enable = 0; 
00FF:  BCF    06.0
.................... } 
0100:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0101:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0122:  MOVF   78,W
0123:  MOVWF  3C
0124:  BTFSC  3C.7
0125:  GOTO   102
....................       lcd.rs = address; 
0126:  BTFSS  3A.0
0127:  BCF    06.1
0128:  BTFSC  3A.0
0129:  BSF    06.1
....................       delay_cycles(1); 
012A:  NOP
....................       lcd.rw = 0; 
012B:  BCF    06.2
....................       delay_cycles(1); 
012C:  NOP
....................       lcd.enable = 0; 
012D:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
012E:  SWAPF  3B,W
012F:  MOVWF  3C
0130:  MOVLW  0F
0131:  ANDWF  3C,F
0132:  MOVF   3C,W
0133:  MOVWF  3D
0134:  CALL   0F5
....................       lcd_send_nibble(n & 0xf); 
0135:  MOVF   3B,W
0136:  ANDLW  0F
0137:  MOVWF  3C
0138:  MOVWF  3D
0139:  CALL   0F5
.................... } 
013A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
013B:  MOVLW  00
013C:  BSF    03.5
013D:  MOVWF  06
....................     lcd.rs = 0; 
013E:  BCF    03.5
013F:  BCF    06.1
....................     lcd.rw = 0; 
0140:  BCF    06.2
....................     lcd.enable = 0; 
0141:  BCF    06.0
....................     delay_ms(15); 
0142:  MOVLW  0F
0143:  MOVWF  36
0144:  CALL   0E0
....................     for(i=1;i<=3;++i) { 
0145:  MOVLW  01
0146:  MOVWF  34
0147:  MOVF   34,W
0148:  SUBLW  03
0149:  BTFSS  03.0
014A:  GOTO   153
....................        lcd_send_nibble(3); 
014B:  MOVLW  03
014C:  MOVWF  3D
014D:  CALL   0F5
....................        delay_ms(5); 
014E:  MOVLW  05
014F:  MOVWF  36
0150:  CALL   0E0
....................     } 
0151:  INCF   34,F
0152:  GOTO   147
....................     lcd_send_nibble(2); 
0153:  MOVLW  02
0154:  MOVWF  3D
0155:  CALL   0F5
....................     for(i=0;i<=3;++i) 
0156:  CLRF   34
0157:  MOVF   34,W
0158:  SUBLW  03
0159:  BTFSS  03.0
015A:  GOTO   164
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
015B:  MOVF   34,W
015C:  CALL   033
015D:  MOVWF  35
015E:  CLRF   3A
015F:  MOVF   35,W
0160:  MOVWF  3B
0161:  CALL   101
0162:  INCF   34,F
0163:  GOTO   157
.................... } 
0164:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
02C7:  DECFSZ 37,W
02C8:  GOTO   2CA
02C9:  GOTO   2CD
....................      address=lcd_line_two; 
02CA:  MOVLW  40
02CB:  MOVWF  38
....................    else 
02CC:  GOTO   2CE
....................      address=0; 
02CD:  CLRF   38
....................    address+=x-1; 
02CE:  MOVLW  01
02CF:  SUBWF  36,W
02D0:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
02D1:  MOVF   38,W
02D2:  IORLW  80
02D3:  MOVWF  39
02D4:  CLRF   3A
02D5:  MOVF   39,W
02D6:  MOVWF  3B
02D7:  CALL   101
.................... } 
02D8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
02DC:  MOVF   35,W
02DD:  XORLW  0C
02DE:  BTFSC  03.2
02DF:  GOTO   2E7
02E0:  XORLW  06
02E1:  BTFSC  03.2
02E2:  GOTO   2EF
02E3:  XORLW  02
02E4:  BTFSC  03.2
02E5:  GOTO   2F5
02E6:  GOTO   2FA
....................      case '\f'   : lcd_send_byte(0,1); 
02E7:  CLRF   3A
02E8:  MOVLW  01
02E9:  MOVWF  3B
02EA:  CALL   101
....................                    delay_ms(2); 
02EB:  MOVLW  02
02EC:  MOVWF  36
02ED:  CALL   0E0
....................                                            break; 
02EE:  GOTO   300
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
02EF:  MOVLW  01
02F0:  MOVWF  36
02F1:  MOVLW  02
02F2:  MOVWF  37
02F3:  CALL   2C7
02F4:  GOTO   300
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02F5:  CLRF   3A
02F6:  MOVLW  10
02F7:  MOVWF  3B
02F8:  CALL   101
02F9:  GOTO   300
....................      default     : lcd_send_byte(1,c);     break; 
02FA:  MOVLW  01
02FB:  MOVWF  3A
02FC:  MOVF   35,W
02FD:  MOVWF  3B
02FE:  CALL   101
02FF:  GOTO   300
....................    } 
.................... } 
0300:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #include "KBD.C" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBDD.C                                //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81                   // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83                   // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                 // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
.................... } 
*
02D9:  BCF    0A.3
02DA:  BCF    0A.4
02DB:  GOTO   405 (RETURN)
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
039F:  BCF    03.5
03A0:  CLRF   28
....................    static short int kbd_down; 
03A1:  BCF    29.0
....................    static char last_key; 
03A2:  CLRF   2A
....................    static BYTE col; 
03A3:  CLRF   2B
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
0328:  CLRF   34
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
0329:  INCF   28,F
032A:  MOVF   28,W
032B:  SUBLW  21
032C:  BTFSC  03.0
032D:  GOTO   387
....................        switch (col) { 
032E:  MOVF   2B,W
032F:  BTFSC  03.2
0330:  GOTO   338
0331:  XORLW  01
0332:  BTFSC  03.2
0333:  GOTO   33E
0334:  XORLW  03
0335:  BTFSC  03.2
0336:  GOTO   344
0337:  GOTO   34A
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
0338:  MOVLW  DE
0339:  BSF    03.5
033A:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
033B:  BCF    03.5
033C:  MOVWF  06
....................                     break; 
033D:  GOTO   34A
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
033E:  MOVLW  BE
033F:  BSF    03.5
0340:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0341:  BCF    03.5
0342:  MOVWF  06
....................                     break; 
0343:  GOTO   34A
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0344:  MOVLW  7E
0345:  BSF    03.5
0346:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0347:  BCF    03.5
0348:  MOVWF  06
....................                     break; 
0349:  GOTO   34A
....................        } 
....................  
....................        if(kbd_down) { 
034A:  BTFSS  29.0
034B:  GOTO   356
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
034C:  MOVF   06,W
034D:  ANDLW  1E
034E:  SUBLW  1E
034F:  BTFSS  03.2
0350:  GOTO   355
....................            kbd_down=FALSE; 
0351:  BCF    29.0
....................            kchar=last_key; 
0352:  MOVF   2A,W
0353:  MOVWF  34
....................            last_key='\0'; 
0354:  CLRF   2A
....................          } 
....................        } else { 
0355:  GOTO   386
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0356:  MOVF   06,W
0357:  ANDLW  1E
0358:  SUBLW  1E
0359:  BTFSC  03.2
035A:  GOTO   381
....................              if((kbd & ROW0)==0) 
035B:  MOVF   06,W
035C:  ANDLW  02
035D:  BTFSS  03.2
035E:  GOTO   361
....................                row=0; 
035F:  CLRF   35
....................              else if((kbd & ROW1)==0) 
0360:  GOTO   375
0361:  MOVF   06,W
0362:  ANDLW  04
0363:  BTFSS  03.2
0364:  GOTO   368
....................                row=1; 
0365:  MOVLW  01
0366:  MOVWF  35
....................              else if((kbd & ROW2)==0) 
0367:  GOTO   375
0368:  MOVF   06,W
0369:  ANDLW  08
036A:  BTFSS  03.2
036B:  GOTO   36F
....................                row=2; 
036C:  MOVLW  02
036D:  MOVWF  35
....................              else if((kbd & ROW3)==0) 
036E:  GOTO   375
036F:  MOVF   06,W
0370:  ANDLW  10
0371:  BTFSS  03.2
0372:  GOTO   375
....................                row=3; 
0373:  MOVLW  03
0374:  MOVWF  35
....................              last_key =KEYS[row][col]; 
0375:  MOVF   35,W
0376:  MOVWF  36
0377:  MOVLW  03
0378:  MOVWF  37
0379:  GOTO   301
037A:  MOVF   2B,W
037B:  ADDWF  78,W
037C:  CALL   03B
037D:  MOVWF  78
037E:  MOVWF  2A
....................              kbd_down = TRUE; 
037F:  BSF    29.0
....................           } else { 
0380:  GOTO   386
....................              ++col; 
0381:  INCF   2B,F
....................              if(col==3) 
0382:  MOVF   2B,W
0383:  SUBLW  03
0384:  BTFSC  03.2
....................                col=0; 
0385:  CLRF   2B
....................           } 
....................        } 
....................       kbd_call_count=0; 
0386:  CLRF   28
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0387:  MOVLW  FE
0388:  BSF    03.5
0389:  MOVWF  06
....................   return(kchar); 
038A:  BCF    03.5
038B:  MOVF   34,W
038C:  MOVWF  78
.................... } 
038D:  RETLW  00
....................  
....................  
.................... #define LCD_TYPE 1 
....................  
.................... #int_EXT 
....................  
....................    EXT_isr() 
.................... { 
.................... //#bit Led_Interruptor=6.5 
.................... #bit Pulsador_Interruptor=7.0 
....................  
.................... } 
....................  
*
00DC:  BCF    0B.1
00DD:  BCF    0A.3
00DE:  BCF    0A.4
00DF:  GOTO   01D
.................... int a; 
....................  
.................... CHAR O; 
.................... //unsigned long int valor; 
....................  
....................  
.................... void main() 
.................... {  
*
038E:  CLRF   04
038F:  BCF    03.7
0390:  MOVLW  1F
0391:  ANDWF  03,F
0392:  MOVLW  19
0393:  BSF    03.5
0394:  MOVWF  19
0395:  MOVLW  A6
0396:  MOVWF  18
0397:  MOVLW  90
0398:  BCF    03.5
0399:  MOVWF  18
039A:  BSF    03.5
039B:  BSF    1F.0
039C:  BSF    1F.1
039D:  BSF    1F.2
039E:  BCF    1F.3
....................    int16 valor; 
....................    float voltios; 
....................     
....................    lcd_init(); 
*
03A4:  CALL   13B
....................     
....................    setup_adc_ports(RA0_ANALOG); 
03A5:  BSF    03.5
03A6:  BCF    1F.0
03A7:  BSF    1F.1
03A8:  BSF    1F.2
03A9:  BSF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
03AA:  BCF    03.5
03AB:  BSF    1F.6
03AC:  BSF    1F.7
03AD:  BSF    03.5
03AE:  BCF    1F.7
03AF:  BCF    03.5
03B0:  BSF    1F.0
....................  
....................    //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); 
....................     
....................    set_adc_channel(0); 
03B1:  MOVLW  00
03B2:  MOVWF  78
03B3:  MOVF   1F,W
03B4:  ANDLW  C7
03B5:  IORWF  78,W
03B6:  MOVWF  1F
....................     
.................... //  *********************************************** 
....................   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
03B7:  BSF    03.5
03B8:  MOVF   01,W
03B9:  ANDLW  C7
03BA:  IORLW  08
03BB:  MOVWF  01
....................    enable_interrupts(INT_EXT); 
03BC:  BCF    03.5
03BD:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
03BE:  MOVLW  C0
03BF:  IORWF  0B,F
....................    
....................    
....................   while(1) 
....................    { 
....................       valor=read_adc();  
03C0:  BSF    1F.2
03C1:  BTFSC  1F.2
03C2:  GOTO   3C1
03C3:  MOVF   1E,W
03C4:  CLRF   2F
03C5:  MOVWF  2E
....................       delay_ms(20); 
03C6:  MOVLW  14
03C7:  MOVWF  36
03C8:  CALL   0E0
....................       voltios=valor*5.0/1023; 
03C9:  MOVF   2F,W
03CA:  MOVWF  35
03CB:  MOVF   2E,W
03CC:  MOVWF  34
03CD:  GOTO   165
03CE:  MOVF   7A,W
03CF:  MOVWF  37
03D0:  MOVF   79,W
03D1:  MOVWF  36
03D2:  MOVF   78,W
03D3:  MOVWF  35
03D4:  MOVF   77,W
03D5:  MOVWF  34
03D6:  CLRF   3B
03D7:  CLRF   3A
03D8:  MOVLW  20
03D9:  MOVWF  39
03DA:  MOVLW  81
03DB:  MOVWF  38
03DC:  GOTO   184
03DD:  MOVF   77,W
03DE:  MOVWF  34
03DF:  MOVF   78,W
03E0:  MOVWF  35
03E1:  MOVF   79,W
03E2:  MOVWF  36
03E3:  MOVF   7A,W
03E4:  MOVWF  37
03E5:  MOVWF  3B
03E6:  MOVF   79,W
03E7:  MOVWF  3A
03E8:  MOVF   78,W
03E9:  MOVWF  39
03EA:  MOVF   77,W
03EB:  MOVWF  38
03EC:  CLRF   3F
03ED:  MOVLW  C0
03EE:  MOVWF  3E
03EF:  MOVLW  7F
03F0:  MOVWF  3D
03F1:  MOVLW  88
03F2:  MOVWF  3C
03F3:  GOTO   1FB
03F4:  MOVF   7A,W
03F5:  MOVWF  33
03F6:  MOVF   79,W
03F7:  MOVWF  32
03F8:  MOVF   78,W
03F9:  MOVWF  31
03FA:  MOVF   77,W
03FB:  MOVWF  30
....................       lcd_gotoxy(1,1); 
03FC:  MOVLW  01
03FD:  MOVWF  36
03FE:  MOVWF  37
03FF:  CALL   2C7
....................      // printf(LCD_PUTC, "VOLTIOS==> %1.2f",voltios); 
....................        
....................        
....................  //********************************************      
....................        
....................       port_b_pullups(0xff); 
0400:  BSF    03.5
0401:  BCF    01.7
....................       lcd_init(); 
0402:  BCF    03.5
0403:  CALL   13B
....................       kbd_init(); 
0404:  GOTO   2D9
....................       a=0; 
0405:  CLRF   2C
....................       printf(LCD_PUTC,"\f Pulse una tecla"); 
0406:  CLRF   34
0407:  MOVF   34,W
0408:  CALL   04B
0409:  INCF   34,F
040A:  MOVWF  77
040B:  MOVWF  35
040C:  CALL   2DC
040D:  MOVLW  11
040E:  SUBWF  34,W
040F:  BTFSS  03.2
0410:  GOTO   407
....................        
....................       while(a==0) a=kbd_getc(); 
0411:  MOVF   2C,F
0412:  BTFSS  03.2
0413:  GOTO   418
0414:  CALL   328
0415:  MOVF   78,W
0416:  MOVWF  2C
0417:  GOTO   411
....................       //printf(LCD_PUTC,"\f La tecla es %C", a); 
....................       //printf("\f La tecla es %C", a); 
....................       printf(LCD_PUTC,"\f Agua"); 
0418:  CLRF   34
0419:  MOVF   34,W
041A:  CALL   061
041B:  INCF   34,F
041C:  MOVWF  77
041D:  MOVWF  35
041E:  CALL   2DC
041F:  MOVLW  06
0420:  SUBWF  34,W
0421:  BTFSS  03.2
0422:  GOTO   419
....................        delay_ms(1000);   
0423:  MOVLW  04
0424:  MOVWF  34
0425:  MOVLW  FA
0426:  MOVWF  36
0427:  CALL   0E0
0428:  DECFSZ 34,F
0429:  GOTO   425
....................       while(a==0) a=kbd_getc(); 
042A:  MOVF   2C,F
042B:  BTFSS  03.2
042C:  GOTO   431
042D:  CALL   328
042E:  MOVF   78,W
042F:  MOVWF  2C
0430:  GOTO   42A
....................       printf(LCD_PUTC,"\f Chocolatina"); 
0431:  CLRF   34
0432:  MOVF   34,W
0433:  CALL   06C
0434:  INCF   34,F
0435:  MOVWF  77
0436:  MOVWF  35
0437:  CALL   2DC
0438:  MOVLW  0D
0439:  SUBWF  34,W
043A:  BTFSS  03.2
043B:  GOTO   432
....................        delay_ms(1000);   
043C:  MOVLW  04
043D:  MOVWF  34
043E:  MOVLW  FA
043F:  MOVWF  36
0440:  CALL   0E0
0441:  DECFSZ 34,F
0442:  GOTO   43E
....................       while(a==0) a=kbd_getc(); 
0443:  MOVF   2C,F
0444:  BTFSS  03.2
0445:  GOTO   44A
0446:  CALL   328
0447:  MOVF   78,W
0448:  MOVWF  2C
0449:  GOTO   443
....................       printf(LCD_PUTC,"\f Zumo"); 
044A:  CLRF   34
044B:  MOVF   34,W
044C:  CALL   07E
044D:  INCF   34,F
044E:  MOVWF  77
044F:  MOVWF  35
0450:  CALL   2DC
0451:  MOVLW  06
0452:  SUBWF  34,W
0453:  BTFSS  03.2
0454:  GOTO   44B
....................        delay_ms(1000);   
0455:  MOVLW  04
0456:  MOVWF  34
0457:  MOVLW  FA
0458:  MOVWF  36
0459:  CALL   0E0
045A:  DECFSZ 34,F
045B:  GOTO   457
....................       while(a==0) a=kbd_getc(); 
045C:  MOVF   2C,F
045D:  BTFSS  03.2
045E:  GOTO   463
045F:  CALL   328
0460:  MOVF   78,W
0461:  MOVWF  2C
0462:  GOTO   45C
....................       printf(LCD_PUTC,"\f Coca cola"); 
0463:  CLRF   34
0464:  MOVF   34,W
0465:  CALL   089
0466:  INCF   34,F
0467:  MOVWF  77
0468:  MOVWF  35
0469:  CALL   2DC
046A:  MOVLW  0B
046B:  SUBWF  34,W
046C:  BTFSS  03.2
046D:  GOTO   464
....................       delay_ms(1000);   
046E:  MOVLW  04
046F:  MOVWF  34
0470:  MOVLW  FA
0471:  MOVWF  36
0472:  CALL   0E0
0473:  DECFSZ 34,F
0474:  GOTO   470
....................      while(a==0) a=kbd_getc(); 
0475:  MOVF   2C,F
0476:  BTFSS  03.2
0477:  GOTO   47C
0478:  CALL   328
0479:  MOVF   78,W
047A:  MOVWF  2C
047B:  GOTO   475
....................      printf(LCD_PUTC,"\f Naranja"); 
047C:  CLRF   34
047D:  MOVF   34,W
047E:  CALL   099
047F:  INCF   34,F
0480:  MOVWF  77
0481:  MOVWF  35
0482:  CALL   2DC
0483:  MOVLW  09
0484:  SUBWF  34,W
0485:  BTFSS  03.2
0486:  GOTO   47D
....................        delay_ms(1000);   
0487:  MOVLW  04
0488:  MOVWF  34
0489:  MOVLW  FA
048A:  MOVWF  36
048B:  CALL   0E0
048C:  DECFSZ 34,F
048D:  GOTO   489
....................       while(a==0) a=kbd_getc(); 
048E:  MOVF   2C,F
048F:  BTFSS  03.2
0490:  GOTO   495
0491:  CALL   328
0492:  MOVF   78,W
0493:  MOVWF  2C
0494:  GOTO   48E
....................       printf(LCD_PUTC,"\f Limon"); 
0495:  CLRF   34
0496:  MOVF   34,W
0497:  CALL   0A7
0498:  INCF   34,F
0499:  MOVWF  77
049A:  MOVWF  35
049B:  CALL   2DC
049C:  MOVLW  07
049D:  SUBWF  34,W
049E:  BTFSS  03.2
049F:  GOTO   496
....................        delay_ms(1000);   
04A0:  MOVLW  04
04A1:  MOVWF  34
04A2:  MOVLW  FA
04A3:  MOVWF  36
04A4:  CALL   0E0
04A5:  DECFSZ 34,F
04A6:  GOTO   4A2
....................       while(a==0) a=kbd_getc(); 
04A7:  MOVF   2C,F
04A8:  BTFSS  03.2
04A9:  GOTO   4AE
04AA:  CALL   328
04AB:  MOVF   78,W
04AC:  MOVWF  2C
04AD:  GOTO   4A7
....................       printf(LCD_PUTC,"\f Chicles"); 
04AE:  CLRF   34
04AF:  MOVF   34,W
04B0:  CALL   0B3
04B1:  INCF   34,F
04B2:  MOVWF  77
04B3:  MOVWF  35
04B4:  CALL   2DC
04B5:  MOVLW  09
04B6:  SUBWF  34,W
04B7:  BTFSS  03.2
04B8:  GOTO   4AF
....................        delay_ms(1000);   
04B9:  MOVLW  04
04BA:  MOVWF  34
04BB:  MOVLW  FA
04BC:  MOVWF  36
04BD:  CALL   0E0
04BE:  DECFSZ 34,F
04BF:  GOTO   4BB
....................       while(a==0) a=kbd_getc(); 
04C0:  MOVF   2C,F
04C1:  BTFSS  03.2
04C2:  GOTO   4C7
04C3:  CALL   328
04C4:  MOVF   78,W
04C5:  MOVWF  2C
04C6:  GOTO   4C0
....................       printf(LCD_PUTC,"\f Chuches"); 
04C7:  CLRF   34
04C8:  MOVF   34,W
04C9:  CALL   0C1
04CA:  INCF   34,F
04CB:  MOVWF  77
04CC:  MOVWF  35
04CD:  CALL   2DC
04CE:  MOVLW  09
04CF:  SUBWF  34,W
04D0:  BTFSS  03.2
04D1:  GOTO   4C8
....................        delay_ms(1000);   
04D2:  MOVLW  04
04D3:  MOVWF  34
04D4:  MOVLW  FA
04D5:  MOVWF  36
04D6:  CALL   0E0
04D7:  DECFSZ 34,F
04D8:  GOTO   4D4
....................       while(a==0) a=kbd_getc(); 
04D9:  MOVF   2C,F
04DA:  BTFSS  03.2
04DB:  GOTO   4E0
04DC:  CALL   328
04DD:  MOVF   78,W
04DE:  MOVWF  2C
04DF:  GOTO   4D9
....................       printf(LCD_PUTC,"\f Fritos"); 
04E0:  CLRF   34
04E1:  MOVF   34,W
04E2:  CALL   0CF
04E3:  INCF   34,F
04E4:  MOVWF  77
04E5:  MOVWF  35
04E6:  CALL   2DC
04E7:  MOVLW  08
04E8:  SUBWF  34,W
04E9:  BTFSS  03.2
04EA:  GOTO   4E1
....................       delay_ms(1000);   
04EB:  MOVLW  04
04EC:  MOVWF  34
04ED:  MOVLW  FA
04EE:  MOVWF  36
04EF:  CALL   0E0
04F0:  DECFSZ 34,F
04F1:  GOTO   4ED
....................        
....................        
....................     // SWITCH(O) 
....................      // { 
....................          //CASE '1': 
....................          //lcd_init(); 
....................          //WHILE(GETTECLA()!='='); 
....................          //printf(LCD_PUTC,"\f Agua"); 
....................        //  printf("\f Agua"); 
....................         // break; 
....................  
....................        //  CASE '2': 
....................         // lcd_init(); 
....................          //WHILE(GETTECLA()!='='); 
....................        //  printf(LCD_PUTC,"\f Chocolatina"); 
....................        //  break; 
....................  
....................         // CASE '3': 
....................          //lcd_init(); 
....................        //  WHILE(GETTECLA()!='='); 
....................        //  printf(LCD_PUTC,"\f Zumo"); 
....................       //   break; 
....................  
....................        //  CASE '4': 
....................          //lcd_init(); 
....................          //WHILE(GETTECLA()!='='); 
....................       //   printf(LCD_PUTC,"\f Coca cola"); 
....................       //   break; 
....................  
....................       //   CASE '5': 
....................          //lcd_init(); 
....................         // WHILE(GETTECLA()!='='); 
....................      //    printf(LCD_PUTC,"\f Naranja"); 
....................      //    break; 
....................  
....................         // CASE '6': 
....................          //lcd_init(); 
....................         // WHILE(GETTECLA()!='='); 
....................         // printf(LCD_PUTC,"\f Limon"); 
....................         //// break; 
....................  
....................         // CASE '7': 
....................          //lcd_init(); 
....................         // WHILE(GETTECLA()!='='); 
....................        //  printf(LCD_PUTC,"\f Chicles"); 
....................        //  break; 
....................          
....................        // CASE '8': 
....................         // lcd_init(); 
....................         // WHILE(GETTECLA()!='='); 
....................         // printf(LCD_PUTC,"\f Chuches"); 
....................         // break; 
....................          
....................        // CASE '9': 
....................          //lcd_init(); 
....................         // WHILE(GETTECLA()!='='); 
....................        //  printf(LCD_PUTC,"\f Fritos"); 
....................        //  break; 
....................          
....................        // default: 
....................        //  lcd_init(); 
....................        //  printf(LCD_PUTC,"\F ERROR"); 
....................        //  break; 
....................  
....................      // } 
....................        
....................    } 
04F2:  GOTO   3C0
.................... } 
04F3:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
